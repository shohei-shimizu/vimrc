snippet for "for (int i = 0; i < max; i++) {...}"
for (int ${1:counter} = 0; $1 < ${2:max}; $1++) {
	${0:// code}
}
endsnippet

snippet while "while (bool) {...}"
while (${1:bool}) {
	${0:// code}
}
endsnippet

snippet main "int main(int argc, char **argv) {...}"
int main(int argc, char **argv) {
	${1:// code}
	return 0;
}
endsnippet

snippet inc "#include <...>"
#include <${1:stdio.h}>
endsnippet

snippet if "if (x == y) {...}"
if (${1:x} ${2:==} ${3:y}) {
	${0:// code}
}
endsnippet

snippet else "else {...}"
else {
	${0:// code}
}
endsnippet

snippet elif "else if {...}"
else if (${1:x} ${2:==} ${3:y}) {
	${0:// code}
}
endsnippet

snippet ? "bool ? true : false"
${1:bool} ? ${2:true} : ${3:false}
endsnippet

snippet func "int func(int arg) {...}"
${1:int} ${2:func}(${3:int arg}) {
	${0:// code}
}
endsnippet

snippet struct "typedef struct {...} name;"
typedef struct {
	${0:// code}
} ${1:name};
endsnippet

snippet struct "name x = {...};"
${1:name} ${2:x} = { ${0:/* code */} };
endsnippet

snippet ifdef "#ifdef ... #endif"
#ifdef
${0:// code}
${1:#else}
#endif
endsnippet

snippet ifndef "#ifdef ... #endif"
#ifndef
${0:// code}
${1:#else}
#endif
endsnippet

snippet def "#define ..."
#define ${1:name} ${0:content}
endsnippet

snippet printf "printf(...);"
printf("${1:%d}", ${2:x});
endsnippet

snippet sizeof "sizeof() / sizeof()"
sizeof(${1:x}) / sizeof($1[${2:0}])
endsnippet

snippet fprintf "fprintf(fp, ...)"
fprintf(${1:stderr}, "${2:message}", ${0:x});
endsnippet

snippet fgets "fgets(arr, max, fp)"
fgets(${1:readline}, ${2:N}, ${3:stdin})
endsnippet

snippet fopen "if (fopen() == NULL) {...}"
if (fopen(${1:filename}, "${2:r}") == NULL) {
	${0:// error handling}
}
endsnippet

snippet malloc "malloc(sizeof(int) * n);"
malloc(sizeof(${1:int}) * ${2:n});
endsnippet
